{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#security-layer","title":"Security Layer","text":"<ol> <li>Authentication</li> <li>Passworld Encryption</li> <li>CSRF / XSS </li> <li>Payload Encyption</li> <li>URL Encyption</li> <li>SSL</li> </ol>"},{"location":"#integration-layer","title":"Integration Layer","text":"<ol> <li>Communication with external systems</li> <li>SSO</li> <li>2FA</li> <li>Email</li> <li>SMS</li> </ol>"},{"location":"#data-access-layer","title":"Data Access Layer","text":"<ol> <li>Database</li> <li>ORM</li> <li>Audit</li> <li>Data Validation</li> <li>Migration</li> </ol>"},{"location":"#queuing-layer","title":"Queuing Layer","text":"<ol> <li>Cache Table</li> <li>Message Queuing Service</li> <li>Celery</li> <li>Task</li> </ol>"},{"location":"#infrastructure","title":"Infrastructure","text":"<ol> <li>Logging</li> <li>File Storage</li> <li>Configuration Management</li> <li>Common Functionality</li> <li>Error Handling</li> </ol>"},{"location":"#application","title":"Application","text":"<ol> <li>Users</li> <li>Role and Permission</li> <li>i18n</li> <li>Timezone</li> <li>Performance testing tool</li> <li>SMS Template</li> <li>Email Template</li> </ol>"},{"location":"2FA/","title":"Integration Layer","text":""},{"location":"2FA/#2fa","title":"2FA","text":"<p>Two-Factor Authentication (2FA) adds an extra layer of security to the authentication process by requiring users to provide two forms of identification before granting access to an account or system. Typically, these factors fall into three categories: something you know (like a password), something you have (like a mobile device), and something you are (like a fingerprint).</p> <p>https://django-otp-official.readthedocs.io/en/stable/</p> <p>https://pypi.org/project/pyotp/</p>"},{"location":"3rdPartyAPI/","title":"Integration Layer","text":""},{"location":"3rdPartyAPI/#communication-with-external-systems","title":"Communication with external systems","text":""},{"location":"3rdPartyAPI/#request-package","title":"Request Package:","text":"<p>Usage: Use libraries like requests in Python or HttpClient in languages like Python to send HTTP requests and receive responses.</p>"},{"location":"3rdPartyAPI/#soap-web-services","title":"SOAP Web Services:","text":"<p>Overview: SOAP (Simple Object Access Protocol) is a protocol for exchanging structured information in web services. It uses XML for message format.</p>"},{"location":"3rdPartyAPI/#httprest-apis","title":"HTTP/REST APIs:","text":"<p>Overview: Most modern systems expose APIs (Application Programming Interfaces) over HTTP using REST (Representational State Transfer) principles.</p>"},{"location":"Api/","title":"Application Layer","text":""},{"location":"Api/#api","title":"Api","text":"<p> Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes. HTTP follows a classical client-server model, with a client opening a connection to make a request, then waiting until it receives a response. HTTP is a stateless protocol, meaning that the server does not keep any data (state) between two requests. </p>"},{"location":"Api/#http-headers","title":"HTTP Headers:","text":"<p> HTTP headers are additional pieces of information sent between the client and the server in both request and response messages. They convey information about the request or the response, the server, the client, or the data being sent.  Here's an overview of how tokens are typically included in HTTP headers:  ### Authorization Header:  The Authorization header is commonly used to include tokens in HTTP requests. The value of this header is typically in the format Bearer , where  is the actual access token.   <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\n</code></pre>"},{"location":"Api/#common-request-headers","title":"Common Request Headers:","text":"<p>User-Agent: Describes the user agent (browser or client) making the request.</p> <p>Host: Specifies the domain name of the server (used in virtual hosting).</p> <p>Accept: Informs the server about the types of media that the client can process.</p> <p>Authorization: Contains credentials for authenticating the client with the server.</p>"},{"location":"Api/#common-response-headers","title":"Common Response Headers:","text":"<p>User-Agent: Describes the user agent (browser or client) making the request.</p> <p>Host: Specifies the domain name of the server (used in virtual hosting).</p> <p>Accept: Informs the server about the types of media that the client can process.</p> <p>Authorization: Contains credentials for authenticating the client with the server.</p>"},{"location":"Api/#http-request-methods","title":"HTTP Request Methods:","text":"<p>HTTP defines several request methods indicating the desired action to be performed on the identified resource.</p> <p>GET: Retrieve data from the server. POST: Send data to the server to create a new resource. PUT: Update a resource on the server. DELETE: Remove a resource from the server. OPTIONS: Describes the communication options for the target resource. HEAD: Same as GET but only retrieves headers, not the actual data.</p>"},{"location":"Api/#cors-cross-origin-resource-sharing","title":"CORS (Cross-Origin Resource Sharing):","text":"<p>CORS is a security feature implemented by web browsers to control access to resources located outside of the origin of the document. It prevents web pages from making requests to a different domain than the one that served the web page.</p>"},{"location":"Api/#cors-headers","title":"CORS Headers:","text":"<p>Origin: Indicates the origin of the cross-origin request.</p> <p>Access-Control-Allow-Origin: Specifies which origin(s) are allowed to access the resource. Access-Control-Allow-Methods: Specifies the HTTP methods allowed when accessing the resource. Access-Control-Allow-Headers: Lists which HTTP headers can be used when making the actual request.</p>"},{"location":"Api/#http-response-status-codes","title":"HTTP Response Status Codes:","text":"<p>HTTP response status codes indicate the outcome of a request. The status code is a three-digit number.</p> <p>Common Status Codes:</p> <p>200 OK: The request was successful.</p> <p>201 Created: The request was successful, and a new resource was created.</p> <p>204 No Content: The server successfully processed the request but there is no content to send.</p> <p>400 Bad Request: The server could not understand the request due to invalid syntax.</p> <p>401 Unauthorized: The request requires user authentication.</p> <p>403 Forbidden: The server understood the request, but it refuses to authorize it.</p> <p>404 Not Found: The requested resource could not be found on the server.</p> <p>500 Internal Server Error: A generic error message returned when an unexpected condition was encountered by the server.</p>"},{"location":"Api/#handling-cors-errors","title":"Handling CORS Errors:","text":"<p>When dealing with CORS errors, make sure that the server includes the necessary CORS headers (Access-Control-Allow-Origin, etc.) in its responses. Additionally, the client-side code (JavaScript) needs to handle CORS errors gracefully.</p> <p>In some cases, using techniques like JSONP, CORS middleware, or adjusting server configurations may be necessary to resolve CORS issues.</p> <p>These concepts are fundamental to understanding and working with HTTP, whether you are building a web application, a RESTful API, or interacting with web services.</p>"},{"location":"Audit/","title":"Data Access Layer","text":""},{"location":"Audit/#audit","title":"Audit","text":"<p>Audit table that logs information about external IP addresses making requests, including details such as request URL, request method, response, response code, and related API, you can follow these steps. Since the details you want to log are related to incoming requests, you'll need to capture this information at the application level rather than the database level</p>"},{"location":"Audit/#step-1-create-an-audit-table-in-the-database","title":"Step 1: Create an Audit Table in the Database","text":"<p>You may have already created a table for auditing in the database, capturing information like timestamp, external IP, etc.</p> <pre><code># models.py\nfrom django.db import models\n\nclass AuditLog(models.Model):\n    external_ip = models.GenericIPAddressField()\n    external_url = models.URLField()\n    method = models.CharField(max_length=10)\n    path = models.CharField(max_length=255)\n    user_agent = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.method} {self.path} from {self.external_ip} accessing {self.external_url}\"\n</code></pre>"},{"location":"Audit/#step-2-implement-request-logging-in-your-application","title":"Step 2: Implement Request Logging in Your Application","text":"<p>In your application code (assuming you're using Python and Django), you can implement request logging middleware or decorators to capture the desired information.</p> <pre><code>\n# middlewares.py\n\nfrom django.utils.deprecation import MiddlewareMixin\nfrom .models import AuditLog\n\nclass AuditLogMiddleware(MiddlewareMixin):\n    def process_request(self, request):\n        # Log the request information to your database\n        external_ip = request.META.get('REMOTE_ADDR')\n        external_url = request.build_absolute_uri()\n        AuditLog.objects.create(\n            external_ip=external_ip,\n            external_url=external_url,\n            method=request.method,\n            path=request.path,\n            user_agent=request.META.get('HTTP_USER_AGENT'),\n            # Add more fields as needed\n        )\n</code></pre>"},{"location":"Audit/#step-3-update-settings","title":"Step 3: Update Settings","text":"<p>Add the updated middleware to the MIDDLEWARE setting in your settings.py file:</p>"},{"location":"Audit/#settingspy","title":"settings.py","text":"<p>MIDDLEWARE = [     # other middleware...     'your_app.middlewares.AuditLogMiddleware', ]</p>"},{"location":"Authentication/","title":"Security Layer","text":""},{"location":"Authentication/#authentication","title":"Authentication","text":"<p>Django provides a robust authentication system as part of its built-in features. The authentication system handles user management, login, logout, password reset, and other related functionalities. Here's an overview of Django's authentication system:</p> <ol> <li>User Models:</li> </ol> <p>Django provides a default User model, which includes fields such as username, email, and password. You can use this model or extend it to add additional fields.</p>"},{"location":"CSRF_XSS/","title":"Security Layer","text":""},{"location":"CSRF_XSS/#csrf","title":"CSRF","text":"<p>Django provides built-in middleware to protect against CSRF (Cross-Site Request Forgery) attacks and includes several measures to mitigate XSS (Cross-Site Scripting) vulnerabilities.</p>"},{"location":"CSRF_XSS/#csrf-protection","title":"CSRF Protection:","text":"<p>Middleware:</p> <p>Django includes middleware called django.middleware.csrf.CsrfViewMiddleware to protect against CSRF attacks.</p> <p>To enable CSRF protection, ensure the following middleware is included in your MIDDLEWARE setting:</p> <pre><code># settings.py\nMIDDLEWARE = [\n    # ...\n    'django.middleware.csrf.CsrfViewMiddleware',\n    # ...\n]\n</code></pre> <p>This middleware provides protection by including a hidden CSRF token in forms and checking this token on form submissions.</p>"},{"location":"CSRF_XSS/#xss","title":"XSS","text":"<p>Django includes several features and practices to mitigate XSS vulnerabilities:</p> <p>Django Forms:</p> <p>When rendering form inputs in templates, Django forms automatically escape form data to prevent XSS vulnerabilities.</p>"},{"location":"CSRF_XSS/#xss-protection","title":"XSS Protection:","text":"<p>Middleware:</p> <p>Django's django.middleware.security.SecurityMiddleware includes various security features, including setting the X-Content-Type-Options header to \"nosniff\" to prevent browsers from interpreting files as a different MIME type, and the X-XSS-Protection header to enable the browser's XSS protection filter.</p> <p>Ensure the following middleware is included in your MIDDLEWARE setting:</p> <pre><code># settings.py\nMIDDLEWARE = [\n    # ...\n    'django.middleware.security.SecurityMiddleware',\n    # ...\n]\n</code></pre> <p>By following these practices and utilizing the built-in security features, Django helps developers create web applications with a strong defense against CSRF attacks and XSS vulnerabilities. Always stay updated with the latest security practices and consider additional security measures based on the specific requirements of your project.</p>"},{"location":"CSRF_XSS/#csrf-xss-using-djangos-default-middleware","title":"CSRF/ XSS using django's default middleware","text":"<pre><code>MIDDLEWARE = [\n'django.middleware.security.SecurityMiddleware',\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n</code></pre>"},{"location":"Celery/","title":"Queuing Layer","text":""},{"location":"Celery/#celery","title":"Celery","text":"<p> Celery is a distributed task queue library for Python that is commonly used with Django for handling asynchronous tasks. It allows you to offload time-consuming tasks to be executed in the background, improving the responsiveness of your web application.  Here is a basic guide on how to set up Celery with Django: </p>"},{"location":"Celery/#install-celery","title":"Install Celery:","text":"<p> Install Celery using pip: </p> <pre><code>pip install celery\n</code></pre>"},{"location":"Celery/#create-a-celery-configuration-file","title":"Create a Celery Configuration File:","text":"<p> Create a file named celery.py in your Django project directory (next to your settings.py). This file will configure and instantiate Celery for your project.  </p> <pre><code># celery.py\nfrom __future__ import absolute_import, unicode_literals\nimport os\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n\n# create a Celery instance and configure it\napp = Celery('your_project')\n\n# Load task modules from all registered Django app configs.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Auto-discover tasks in all installed apps\napp.autodiscover_tasks()\n</code></pre> <p>https://akpolatcem.medium.com/asynchronous-distributed-task-execution-via-python-celery-using-redis-and-rabbitmq-855a282f9e</p>"},{"location":"CeleryCacheTable/","title":"Queuing Layer","text":""},{"location":"CeleryCacheTable/#cache-table-in-django","title":"Cache Table in Django","text":"<p> Django provides a high-level caching framework. You can use the cache framework to store and retrieve data efficiently. Here's a basic example:  </p> <pre><code>settings.py\n\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',\n        'LOCATION': 'DJANGO_CELERY_PENDING_LIST',\n    }\n}\n</code></pre> <p> You can choose different cache backends based on your needs. </p>"},{"location":"CelerySettings/","title":"Queuing Layer","text":""},{"location":"CelerySettings/#celery-settings-and-rabbitmq","title":"Celery Settings and Rabbitmq","text":"<p> Configure Django to Use Celery  Update your Django settings to include Celery settings. In your settings.py file, add or modify the following: </p> <pre><code>settings.py\n\nRABBIT_URL = conf('RABBIT_URL')\n\n# Celery Configuration Options\nCELERY_TIMEZONE = \"Asia/Kolkata\"\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 3600\n# CELERY_BROKER_URL = os.environ.get('BROKER_URL', )\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", RABBIT_URL)\nCELERY_RESULT_BACKEND = os.environ.get(\"CELERY_BROKER\", RABBIT_URL)\n\nCELERY_TASK_SOFT_TIME_LIMIT = 3200\nCELERY_RESULT_BACKEND = 'django-db'\nCELERY_CACHE_BACKEND = 'django-cache'\nCELERY_ACCEPT_CONTENT = ['application/json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERYD_MAX_TASKS_PER_CHILD=1\nCELERY_RESULT_EXTENDED = True\nCELERY_ACKS_LATE = True\n</code></pre> <p> Make sure to replace the CELERY_BROKER_URL and CELERY_RESULT_BACKEND with your desired message broker (like Redis, RabbitMQ). </p>"},{"location":"CeleryTask/","title":"Queuing Layer","text":""},{"location":"CeleryTask/#celery-task","title":"Celery Task","text":"<p> Create tasks in your Django app </p>"},{"location":"CeleryTask/#taskspy-in-your-app","title":"tasks.py in your app","text":"<pre><code>from celery import shared_task\n\n@shared_task\ndef your_task():\n    # Your task logic here\n    pass\n\n</code></pre> <p> Run Celery:  </p> <pre><code>celery -A your_project worker -l info\n</code></pre> <p> To run the  digid app queues: </p> <pre><code>celery -A TC_CELERY.DI.detect_image worker  --pool=solo --loglevel=INFO -n worker1.%h\ncelery -A TC_CELERY.IV.id_verfication worker  --pool=solo --loglevel=INFO -n worker2.%h\ncelery -A TC_CELERY.LD.liveness_detection worker  --pool=solo --loglevel=INFO -n worker2.%h\ncelery -A TC_CELERY.TM.template_matching worker  --pool=solo --loglevel=INFO -n worker3.%h\ncelery -A TC_CELERY.OCR.ocr worker  --pool=solo --loglevel=INFO -n worker4.%h\ncelery -A TC_CELERY.NT.sms worker -Q queue_sms --pool=solo --loglevel=INFO -n worker6.%h\ncelery -A TC_CELERY.NT.email worker -Q queue_email --pool=solo --loglevel=INFO -n worker7.%h\n\n</code></pre>"},{"location":"CommonFunctionality/","title":"Infrastructure","text":""},{"location":"CommonFunctionality/#common-functionality","title":"Common Functionality","text":"<p>Python, there are several functions and patterns that are commonly reused across different projects. Here are some commonly used functions and patterns:</p> <p>Generate OTP:</p> <pre><code>import random\n\ndef generate_otp(length=6):\n    \"\"\"Generate a random OTP.\"\"\"\n    return ''.join(random.choice('0123456789') for _ in range(length))\n\n# Example usage:\notp = generate_otp()\nprint(f\"Generated OTP: {otp}\")\n\n\n</code></pre> <p>Validate Date Format Based on Platform:</p> <pre><code>import datetime\n\ndef validate_date_format(date_string, platform='unix'):\n    \"\"\"Validate date format based on the platform ('unix' or 'windows').\"\"\"\n    try:\n        if platform == 'unix':\n            datetime.datetime.strptime(date_string, '%Y-%m-%d')\n        elif platform == 'windows':\n            datetime.datetime.strptime(date_string, '%m/%d/%Y')\n        else:\n            raise ValueError(\"Invalid platform specified.\")\n        return True\n    except ValueError:\n        return False\n\n# Example usage:\ndate_unix = '2022-02-18'\ndate_windows = '02/18/2022'\n\nprint(validate_date_format(date_unix, platform='unix'))      # True\nprint(validate_date_format(date_windows, platform='windows'))  # True\nprint(validate_date_format('2022/02/18', platform='unix'))    # False\n\n</code></pre> <p>Convert Lengthy Decimal Value to 8 Decimal Places:</p> <pre><code>def convert_to_8_decimal(value):\n    \"\"\"Convert a lengthy decimal value to an 8-decimal value.\"\"\"\n    try:\n        return round(float(value), 8)\n    except ValueError:\n        return None\n\n# Example usage:\nlengthy_decimal = \"12345.6789012345678901234567890123456789\"\nconverted_value = convert_to_8_decimal(lengthy_decimal)\nprint(f\"Converted Value: {converted_value}\")\n\n\n</code></pre> <p>Validate Not Future Date:</p> <pre><code>def validate_not_future_date(date_string, format='%Y-%m-%d'):\n    \"\"\"Validate that a date is not a future date.\"\"\"\n    try:\n        input_date = datetime.datetime.strptime(date_string, format)\n        today = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)\n        return input_date &lt;= today\n    except ValueError:\n        return False\n\n# Example usage:\ndate_future = '2022-02-20'\ndate_past = '2022-02-18'\n\nprint(validate_not_future_date(date_future))  # False\nprint(validate_not_future_date(date_past))    # True\nprint(validate_not_future_date('invalid_date'))  # False\n\n</code></pre>"},{"location":"ConfigurationManagement/","title":"Infrastructure Layer","text":""},{"location":"ConfigurationManagement/#configuration-management","title":"Configuration management","text":"<p>  To manage configuration settings in a Django project using a .ini file and the python-decouple library, follow these steps:  </p> <p> Install python-decouple: </p> <pre><code>pip install python-decouple\n</code></pre> <p> Create a .ini file: </p> <p> Create a .ini file (e.g., config.ini) to store your configuration settings. For example: &lt;\\p&gt;   <pre><code>[DATABASE]\nNAME=mydatabase\nUSER=mydatabaseuser\nPASSWORD=mypassword\nHOST=localhost\nPORT=5432\n\n[SECRET_KEY]\nKEY=mysecretkey            \n</code></pre>  Use python-decouple in Django settings  <p> Update your Django settings (settings.py) to use python-decouple to read values from the .ini file: </p> <pre><code>from decouple import config\n\ndatabase_name = config('DATABASE_NAME', default='')\nsecret_key = config('SECRET_KEY', default='')\n\n# Database settings\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DATABASE_NAME', default=''),\n        'USER': config('DATABASE_USER', default=''),\n        'PASSWORD': config('DATABASE_PASSWORD', default=''),\n        'HOST': config('DATABASE_HOST', default=''),\n        'PORT': config('DATABASE_PORT', default=''),\n    }\n}\n\n# Secret key\nSECRET_KEY = config('SECRET_KEY', default='')\n</code></pre> <p> Secure the .ini file:  Ensure that your .ini file is not exposed to the public or unauthorized users. Keep it secure, and do not include sensitive information in version control systems.  By following these steps, you can manage your Django project's configuration settings in a separate .ini file using the python-decouple library. This helps keep sensitive information separate from your code and makes it easier to manage different configurations for development, testing, and production environments. </p>"},{"location":"DataValidation/","title":"Data Access Layer","text":""},{"location":"DataValidation/#data-validation","title":"Data Validation","text":"<p> https://docs.pydantic.dev/latest/  Pydantic is a data validation and settings management library in Python. It is used for data validation and parsing by defining data models using Python type annotations. Pydantic is often used in web applications, APIs, and other projects where data validation and serialization/deserialization are important.  Here's a basic overview of using Pydantic:  </p> <pre><code>\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    username: str\n    email: str\n    age: int\n\n\n\nuser_data = {\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"age\": 25,\n}\n\nuser = User(**user_data)\nPydantic will validate the data against the defined model.\n\n</code></pre>"},{"location":"DataValidation/#incorrect-data","title":"Incorrect data","text":"<pre><code>\ninvalid_user_data = {\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"age\": \"twenty-five\",  # Should be an int, not a str\n}\n\n# This will raise a validation error\ninvalid_user = User(**invalid_user_data)\n\n</code></pre> <p>Pydantic will raise a validation error.</p> <p></p>"},{"location":"Database/","title":"Data Access Layer","text":""},{"location":"Database/#database","title":"Database","text":"<p> Django primarily uses the Django ORM (Object-Relational Mapping) for database interactions, and it comes with its own database models and query system. On the other hand, SQLAlchemy is a popular SQL toolkit and Object-Relational Mapping (ORM) library for Python that is commonly used outside of the Django ecosystem.  If you are specifically interested in using SQLAlchemy with Django, you can do so, but it requires some additional setup and integration.  Certainly! Below are example connection strings for various databases using SQLAlchemy:   </p>"},{"location":"Database/#sqlite","title":"SQLite","text":"<pre><code>sqlite_url = 'sqlite:///example.db'\n\n</code></pre>"},{"location":"Database/#postgresql","title":"PostgreSQL","text":"<pre><code>postgresql_url = 'postgresql://user:password@localhost:5432/mydatabase'\n\n</code></pre>"},{"location":"Database/#mysql","title":"MySQL","text":"<pre><code>mysql_url = 'mysql://user:password@localhost:3306/mydatabase'\n\n</code></pre>"},{"location":"Database/#oracle","title":"Oracle","text":"<pre><code>oracle_url = 'oracle://user:password@localhost:1521/mydatabase'\n\n</code></pre>"},{"location":"Database/#ms-sql","title":"MS-SQL","text":"<pre><code>mssql_url = 'mssql+pyodbc://user:password@localhost:1433/mydatabase?driver=ODBC+Driver+17+for+SQL+Server'\n\n</code></pre>"},{"location":"Database/#firebird","title":"Firebird","text":"<pre><code>firebird_url = 'firebird+fdb://user:password@localhost:3050/mydatabase'\n\n</code></pre>"},{"location":"Database/#sybase","title":"Sybase","text":"<pre><code>firebird_url = 'sybase_url = 'sybase+pyodbc://user:password@localhost:5000/mydatabase?driver=FreeTDS'\n'\n\n</code></pre> <p> Please note the following:  Replace user, password, localhost, mydatabase, and other parameters with your actual database credentials and details.  For MS-SQL, the connection string includes driver as it specifies the ODBC driver.  For Firebird, the connection string uses the fdb driver.  For Sybase, the connection string uses the FreeTDS driver.  Make sure to install the appropriate Python packages for each database. For example:  </p> <pre><code>pip install sqlalchemy psycopg2  # for PostgreSQL\npip install sqlalchemy pymysql  # for MySQL\npip install sqlalchemy cx_Oracle  # for Oracle\npip install sqlalchemy pyodbc  # for MS-SQL\npip install sqlalchemy fdb  # for Firebird\npip install sqlalchemy pyodbc  # for Sybase\n</code></pre>"},{"location":"Email/","title":"Integration Layer","text":""},{"location":"Email/#email","title":"Email","text":""},{"location":"Email/#1-configure-email-settings","title":"1. Configure Email Settings:","text":"<p>  Ensure that you have configured the email settings in your Django project's settings file, including SMTP server details.  </p> <pre><code># settings.py\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'your_smtp_server'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@example.com'\nEMAIL_HOST_PASSWORD = 'your_email_password'\n\nMAIL_ENCRPT_KEY = bytes(conf('MAIL_ENCRPT_KEY'), 'utf-8')\nMAIL_DOMAIN_NAME = conf('MAIL_DOMAIN_NAME')\nEMAIL_USE_SSL = True\n# EMAIL_AUTO_LINK_KEY = b'iE_tQLb6FHPeuqmKeys'\n# PASSWORD_OFFSET = 24\n# PASSWORD_EXPIRY_OFFSET = 60\n\n\n</code></pre> <p> Adjust the settings according to your email provider.  That's a basic overview of using email templates in Django. Adjust the code based on your specific requirements and configurations.  </p>"},{"location":"Email/#2-send-the-email","title":"2. Send the Email","text":"<p> Use the send_mail function to send the email. </p> <pre><code>from django.core.mail import send_mail\n\ndef send_email(request):\n    recipient_email = \"john.doe@example.com\"\n    subject = \"Subject of your email\"\n    message = render_to_string('your_app/email_template.html', {'recipient_name': recipient_name})\n\n    send_mail(subject, message, 'your_email@example.com', [recipient_email])\n</code></pre> <p> Make sure to replace 'your_app' with the name of your Django app and 'your_email@example.com' with the email address you want to use as the sender. </p>"},{"location":"EmailTemplate/","title":"Application Layer","text":""},{"location":"EmailTemplate/#email-template","title":"Email Template","text":"<p> 1. Create an Email Template:  First, create an HTML file for your email template. You can store your email templates in the templates directory of your Django app. For example, create a file like email_template.html. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;p&gt;Hello {{ recipient_name }},&lt;/p&gt;\n    &lt;p&gt;This is the content of your email.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;/code&gt;\n</code></pre> <p> 2. Load and Render the Template in Your Django View:  In your Django view, load and render the email template using the render_to_string function.  </p> <pre><code>from django.template.loader import render_to_string\n\ndef send_email(request):\n    recipient_name = \"John Doe\"\n    email_content = render_to_string('your_app/email_template.html', {'recipient_name': recipient_name})\n</code></pre>"},{"location":"ErrorHandling/","title":"Infrastructure Layer","text":""},{"location":"ErrorHandling/#error-handling","title":"Error Handling","text":""},{"location":"ErrorHandling/#error-handling-and-logging","title":"Error Handling and Logging:","text":"<p>Overview: Implement robust error handling to deal with communication failures gracefully. Log relevant information for troubleshooting.</p>"},{"location":"ErrorHandling/#django-rest-framework-drf-custom-exception-handling","title":"Django Rest Framework (DRF) Custom Exception Handling:","text":"<p>For Django Rest Framework, you can customize exception handling by creating a custom exception handler.</p> <pre><code># views.py\nfrom rest_framework.views import exception_handler\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\ndef custom_exception_handler(exc, context):\n    response = exception_handler(exc, context)\n    if response is not None:\n        custom_response_data = {\n            'error': 'Custom error message',\n            'status_code': response.status_code\n        }\n        response.data = custom_response_data\n    return response\n</code></pre> <p>Set the custom exception handler in your settings.py:</p> <pre><code># settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'your_app.views.custom_exception_handler',\n}\n\n</code></pre>"},{"location":"ErrorHandling/#custom-error-views","title":"Custom Error Views","text":"<p>For production, you can create custom error views to handle specific HTTP error codes.</p> <pre><code># views.py\nfrom django.shortcuts import render\n\ndef handler404(request, exception):\n    return render(request, '404.html', status=404)\n\ndef handler500(request):\n    return render(request, '500.html', status=500)\n</code></pre>"},{"location":"ErrorHandling/#middleware-for-5xx-errors","title":"Middleware for 5xx Errors","text":"<p>For production, you can create custom error views to handle specific HTTP error codes.</p> <pre><code># middleware.py\nfrom django.http import HttpResponseServerError\n\nclass CustomServerErrorMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        try:\n            response = self.get_response(request)\n        except Exception:\n            return HttpResponseServerError(render(request, '500.html', status=500))\n        return response\n</code></pre>"},{"location":"ErrorHandling/#pydantic","title":"Pydantic","text":"<p>When a validation error occurs, Pydantic raises a ValidationError with details about the error, including the field causing the issue and the reason for the failure. You can catch this error and handle it according to your application's requirements.</p> <p>Customizing error handling further involves writing code to handle specific validation errors and define how your application should respond when validation fails. Additionally, Pydantic supports custom validation functions that allow you to implement more complex validation logic within your models.</p>"},{"location":"FileStorage/","title":"Infrastructure Layer","text":""},{"location":"FileStorage/#file-storage","title":"File Storage","text":"<p>  In Django, file storage is used to manage how and where files are stored and retrieved in a web application. Django comes with a default file storage system that stores files on the local filesystem  Extra :   but it also provides other storage backends for cloud services like Amazon S3, Google Cloud Storage, etc.   Here's a basic overview of file storage in Django: </p> <p> Default File Storage (Local): </p> <p> In your settings.py, the MEDIA_ROOT setting determines the base directory where media files (uploads) will be stored, and MEDIA_URL sets the base URL for serving media files.  but digid its customized configuation in settings: 1. File storage 2. AI Model Storage 3. Email template Storage 4. Static file Storage </p> <pre><code>FILE_STORAGE = conf('FILE_STORAGE')\nMODEL_STORAGE = conf('MODEL_STORAGE')\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join (BASE_DIR, \"__shared__\" ),\n]\n\nSTATIC_ROOT = os.path.join(FILE_STORAGE, 'static')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(FILE_STORAGE, 'media')\nFILE_UPLOAD_PERMISSIONS = 0o644\n\n</code></pre>"},{"location":"Logging/","title":"Infrastructure Layer","text":""},{"location":"Logging/#logging","title":"Logging","text":"<p> Logging is an essential aspect of software development as it helps in monitoring and debugging applications. In Django, you can configure logging to record information about your application's behavior.  Here are the steps to set up logging in a Django project:  Digid Customized logger functions:  1. Application level logger - MLBANK 2. Query level logger - QUERY 3. Integration level logger - INTEG 3. Queue level logger - AI  </p>"},{"location":"Logging/#1-configure-logging-settings","title":"1. Configure Logging Settings:","text":"<pre><code>import os\n\n# ...\n\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'standard': {\n            'format' : \"[%(asctime)s] %(levelname)s [%(name)s:%(filename)s:%(lineno)s:%(funcName)s] %(message)s\",\n            'datefmt' : \"%d/%b/%Y %H:%M:%S\"\n        },\n    },\n    'handlers': {\n        'MLBANK': {\n            'handlers': ['console', 'logfile'],\n            'level': 'DEBUG',\n            'propagate': False\n        },\n        'INTEG': {\n            'handlers': ['console', 'logfile'], #['dynamic_debug'],\n            'level': 'DEBUG',\n            'propagate': False\n        },\n        'QUERY': {\n            'handlers': ['query_prints'],\n            'level': 'INFO',\n            'propagate': False\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file'],\n            'level': 'DEBUG',\n            'propagate': True,\n        },\n    },\n}\n\n</code></pre>"},{"location":"Logging/#2-use-logging-in-your-code","title":"#2. Use Logging in Your Code","text":"<p> You can use the logging module in your Django code to add log messages. For example:  </p> <pre><code>import logging\n\nlogger = logging.getLogger('MLBANK')\nqlogger = logging.getLogger('QUERY')\nilogger = logging.getLogger('INTEG')\n\n\n# Example app log messages\nlogger.debug('This is a debug message')\nlogger.info('This is an info message')\nlogger.warning('This is a warning message')\nlogger.error('This is an error message')\nlogger.critical('This is a critical message')\n\n# Example query log messages\nqlogger.debug('This is a debug message')\nqlogger.info('This is an info message')\n\n\n# Example query log messages\nilogger.debug('This is a debug message')\nilogger.info('This is an info message')\n</code></pre>"},{"location":"Migration/","title":"Data Access Layer","text":""},{"location":"Migration/#migration","title":"Migration","text":"<p> https://alembic.sqlalchemy.org/en/latest/  SQLAlchemy itself does not provide a built-in migration system like Django or Alembic, but many projects use Alembic in combination with SQLAlchemy for database migrations.  Using Alembic with SQLAlchemy:  </p>"},{"location":"Migration/#install-alembic","title":"Install Alembic:","text":"<p>Alembic is a lightweight database migration tool that integrates well with SQLAlchemy. Install it using pip:</p> <pre><code>pip install alembic\n</code></pre>"},{"location":"Migration/#initialize-alembic","title":"Initialize Alembic:","text":"<p>Run the following command to initialize Alembic in your project:</p> <pre><code>alembic init alembic\n</code></pre> <p>This will create an alembic directory with configuration files and a versions directory for storing migration scripts.</p>"},{"location":"Migration/#configure-alembic","title":"Configure Alembic:","text":"<p>Modify the alembic.ini file to specify the database URL and other configuration options.</p> <pre><code># alembic.ini\nsqlalchemy.url = postgresql://user:password@localhost:5432/mydatabase\n</code></pre> <p>Run the following command to generate an initial migration:</p> <pre><code>alembic revision --autogenerate -m \"initial\"\n</code></pre> <p>Apply the migrations to update your database:</p> <pre><code>alembic upgrade head\n</code></pre> <p>When you make changes to your SQLAlchemy model, generate and apply additional migrations:</p> <pre><code>alembic revision --autogenerate -m \"description_of_change\"\nalembic upgrade head\n</code></pre>"},{"location":"ORM/","title":"Data Access Layer","text":""},{"location":"ORM/#orm","title":"ORM","text":"<p> Django comes with its own Object-Relational Mapping (ORM) system, which allows you to interact with your database using Python code rather than raw SQL queries. The Django ORM is a powerful and convenient way to manage database interactions in a Django project.  </p> <p>Library : SQLAlchemy</p> <p> SQLAlchemy is a popular SQL toolkit and Object-Relational Mapping (ORM) library for Python. It provides a set of high-level API for interacting with relational databases and abstracts away many of the complexities involved in working directly with SQL.  </p> <p>https://docs.sqlalchemy.org/en/20/intro.html</p>"},{"location":"PassworldEncryption/","title":"Security Layer","text":""},{"location":"PassworldEncryption/#passworld-encryption","title":"Passworld Encryption","text":"<p>Django, the default password hashing algorithm is pbkdf2_sha256. When you create a user or change a password, Django automatically uses this algorithm to hash the password securely. You don't need to specify the algorithm explicitly as it is the default</p> <p>Algorithm :  pbkdf2_sha256</p> <p>to get the hash algorithm type</p> <pre><code>from django.contrib.auth.hashers import make_password, check_password, identify_hasher\n\n\nhashed_password = \"pbkdf2_sha256$100000$kyOHnnbwxxkV$uK9PhD0rsU1vB+O1rkgZVnhTdIOen3jeY4mSplS0cJg=\"\nhasher = identify_hasher(hashed_password)\nprint(hasher.algorithm) # output  : pbkdf2_sha256\n\n</code></pre> <p>In the one-liner for creating a new password:</p> <pre><code>python3 manage.py shell --command \"from django.contrib.auth.hashers import make_password, check_password; print(make_password('Welcome1@', hasher='pbkdf2_sha256'))\"\n</code></pre> <p>This will output the hashed password using the pbkdf2_sha256 algorithm. Remember that you should store this hashed password in your database for user authentication. When checking a password during login, you can use the check_password function:</p> <pre><code># Example of checking a password during login\nstored_password_hash = \"pbkdf2_sha256$100000$kyOHnnbwxxkV$uK9PhD0rsU1vB+O1rkgZVnhTdIOen3jeY4mSplS0cJg=\"\nentered_password = 'Welcome1@'\n\nif check_password(entered_password, stored_password_hash):\n    print(\"Password is correct!\")\nelse:\n    print(\"Password is incorrect.\")\n</code></pre>"},{"location":"PayloadEncyption/","title":"Security Layer","text":""},{"location":"PayloadEncyption/#payload-encryption","title":"Payload Encryption","text":"<p>For Payload Encryption using AES Encryption with GCM Mode</p> <p>This documentation provides a guide on how to use the <code>Crypto.Cipher</code> module in Python for AES encryption with GCM (Galois/Counter Mode) mode. GCM is an authenticated encryption mode that provides both confidentiality and integrity.</p> <p>Dependencies: - <code>pycryptodome</code>: This library is used for AES encryption and decryption.</p> <p>Import the necessary key and configure developement.ini     hexadecimal string : SECRET_KEY</p> <p>Create an instance of the AESEncryption class for handling AES encryption and decryption:    nonce : AESEncryption(settings.key_hex, secrets.token_hex(16))      every api unique key set in the aes payload to secure the data.</p> <p>In AES-GCM (Advanced Encryption Standard - Galois/Counter Mode), a nonce (number used once) is a value that should be unique for each encryption operation with the same key. It is combined with the key and the plaintext to produce the ciphertext. The uniqueness of the nonce is crucial for the security of the AES-GCM algorithm.</p> <p>The nonce is usually a random or unique value, and it should not be reused with the same key. If a nonce is reused for the same key, it can compromise the security of the encryption and authentication provided by AES-GCM.</p> <p>When working with AES-GCM, the combination of the key and nonce is used to produce a unique keystream for encrypting the plaintext and generating an authentication tag. The authentication tag is used to verify the integrity of the ciphertext during decryption.</p> <p>Here's a simple example using the cryptography library in Python, which is a popular library for cryptography:</p> <pre><code>from cryptography.hazmat.primitives.ciphers.aead import AESGCM\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.backends import default_backend\nimport os\n\n# Generate a random 96-bit nonce\nnonce = os.urandom(12)\n\n# Generate a random 256-bit key\nkey = os.urandom(32)\n\n# Create AES-GCM cipher object\ncipher = AESGCM(key)\n\n# Encrypt the plaintext\nplaintext = b\"Hello, AES-GCM!\"\nciphertext = cipher.encrypt(nonce, plaintext, None)\n\n# Decrypt the ciphertext\ndecrypted_text = cipher.decrypt(nonce, ciphertext, None)\n\n# Verify the authenticity of the ciphertext\ntry:\n    # This should not raise an exception if the ciphertext is authentic\n    cipher.decrypt(nonce, ciphertext, None)\n    print(\"Authentication successful.\")\nexcept Exception as e:\n    print(f\"Authentication failed: {str(e)}\")\n\nprint(f\"Original Text: {decrypted_text.decode('utf-8')}\")\n</code></pre> <p>https://pycryptodome.readthedocs.io/en/latest/src/examples.html#encrypt-data-with-aes</p>"},{"location":"Report/","title":"Application Layer","text":""},{"location":"Report/#performance-testing-tool","title":"Performance testing tool","text":"<p> Locust is an open-source, easy-to-use performance testing tool written in Python. It allows you to define user behavior using Python code and then simulate thousands of users concurrently to test the performance of your web applications. Locust is designed for simplicity, flexibility, and scalability. </p>"},{"location":"RolePermission/","title":"Application Layer","text":""},{"location":"RolePermission/#role-and-permission","title":"Role and Permission","text":"<p> In Django, roles and permissions are used to manage access control and define what actions users are allowed to perform within a web application. Django provides a built-in authentication and authorization system that includes roles and permissions.  For digid we customized based on the application requirements:  tables used:     1. role_action_access,      2. role_crncy_dtls,      3. role_dtls,      4. role_permission_dtls,      5. role_prod_access,      6. role_workflow_access   </p>"},{"location":"RolePermission/#roles","title":"Roles:","text":"<p>Django does not explicitly define roles like \"admin\" or \"manager,\" but rather uses the concept of groups to organize users. You can create groups and assign permissions to those groups, effectively using groups as roles. For example, you might have groups like \"Admins,\" \"Managers,\" and \"Regular Users.\"  Here's how you can create groups in Django <p> <pre><code>from django.contrib.auth.models import Group\n\n# Create a group\nadmin_group = Group.objects.create(name='Admins')\n\n# Assign a user to a group\nuser.groups.add(admin_group)\n</code></pre>   ### Permissions :  <p> Permissions define what actions a user is allowed to perform. Django provides a set of built-in permissions such as add, change, and delete for each model. You can also define custom permissions specific to your application.  Built-in Permissions:  add: Allows adding new instances of the model. change: Allows changing existing instances of the model. delete: Allows deleting instances of the model. view: Allows viewing instances of the model.  </p> <pre><code>from django.contrib.auth.models import Permission\n\n# Get a permission (e.g., change permission for a model)\nchange_permission = Permission.objects.get(codename='change_modelname')\n\n# Assign a permission to a user or group\nuser.user_permissions.add(change_permission)\n</code></pre>"},{"location":"SMS/","title":"Integration Layer","text":""},{"location":"SMS/#email-template","title":"Email Template","text":"<p> 1. Create an Email Template:  First, create an HTML file for your email template. You can store your email templates in the templates directory of your Django app. For example, create a file like email_template.html. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;p&gt;Hello {{ recipient_name }},&lt;/p&gt;\n    &lt;p&gt;This is the content of your email.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;/code&gt;\n</code></pre> <p> 2. Load and Render the Template in Your Django View:  In your Django view, load and render the email template using the render_to_string function.  </p> <pre><code>from django.template.loader import render_to_string\n\ndef send_email(request):\n    recipient_name = \"John Doe\"\n    email_content = render_to_string('your_app/email_template.html', {'recipient_name': recipient_name})\n</code></pre>"},{"location":"SMSTemplate/","title":"Application Layer","text":""},{"location":"SMSTemplate/#sms-template","title":"SMS Template","text":""},{"location":"SMSTemplate/#namedtuple","title":"Namedtuple","text":"<p> A namedtuple is a convenient way to define simple classes in Python, which can be useful for creating a structured representation of an SMS template. Here's an example of how you might use namedtuple to create an SMS template: </p>"},{"location":"SMSTemplate/#sms","title":"SMS","text":"<p> SMS templates based on a given SMS code, you can use a dictionary or a database to store and retrieve templates dynamically. Here's an example using a dictionary to store templates:  </p> <pre><code>from collections import namedtuple\n\n# Define a namedtuple for an SMS template\nSMSTemplate = namedtuple('SMSTemplate', ['content'])\n\n# Dictionary to store SMS templates based on codes\nsms_templates = {\n    'welcome': SMSTemplate(content='Hello {name}! Thank you for signing up.'),\n    'confirmation': SMSTemplate(content='Dear {name}, your order has been confirmed.'),\n    # Add more templates as needed\n}\n\n# Function to format an SMS using a template\ndef format_sms(template, name):\n    return template.content.format(name=name)\n\n# Example usage\nsms_code = 'welcome'  # Replace with the desired SMS code\nname = 'John Doe'\nif sms_code in sms_templates:\n    template = sms_templates[sms_code]\n    formatted_sms = format_sms(template, name)\n    print(formatted_sms)\nelse:\n    print(f\"Error: SMS code '{sms_code}' not found.\")\n</code></pre> <p> SMSTemplate is a named tuple with fields 'title' and 'content'. Two example SMS templates (template1 and template2) are created using the named tuple.  The format_sms function takes an SMS template and a name, and it formats the content of the template by replacing the {name} placeholder with the provided name.  You can customize the fields of the SMSTemplate named tuple based on the specific elements you want to include in your SMS templates. The use of named tuples can make your code more readable and maintainable compared to using plain tuples or dictionaries for representing SMS templates. </p>"},{"location":"SSL/","title":"Security Layer","text":""},{"location":"SSL/#ssl","title":"SSL","text":"<p>To set up SSL with Nginx using Let's Encrypt on Ubuntu, you can follow these steps. Let's assume you have Nginx already installed and configured for your website. If not, install Nginx and set up your website before proceeding.</p>"},{"location":"SSL/#install-certbot","title":"Install Certbot:","text":"<pre><code>sudo apt-get update\nsudo apt-get install certbot python3-certbot-nginx\n</code></pre>"},{"location":"SSL/#obtain-ssl-certificate","title":"Obtain SSL Certificate:","text":"<pre><code>sudo certbot --nginx -d your_domain.com -d www.your_domain.com\n</code></pre>"},{"location":"SSL/#certbot-will-handle-the-ssl-configuration-for-nginx-automatically","title":"Certbot will handle the SSL configuration for Nginx automatically.","text":""},{"location":"SSL/#test-nginx-configuration","title":"Test Nginx Configuration:","text":"<pre><code>sudo nginx -t\n</code></pre>"},{"location":"SSL/#restart-nginx","title":"Restart Nginx:","text":"<pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"SSL/#set-up-automatic-renewal","title":"Set up Automatic Renewal:","text":"<pre><code>sudo crontab -e\n\nAdd the following line: markdown\n\n0 */12 * * * certbot renew\n</code></pre> <p>https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-22-04</p>"},{"location":"SSO/","title":"Integration Layer","text":""},{"location":"SSO/#sso-single-sign-on","title":"SSO - Single sign-on","text":"<p>  LDAP (Lightweight Directory Access Protocol) is a protocol for accessing and maintaining directory services. To interact with LDAP in Python, you can use the ldap3 library. Below is a basic example of connecting to an LDAP server, searching for a user, and retrieving some information.   </p> <p> First, you need to install the ldap3 library: </p> <pre><code>pip install ldap3\n</code></pre> <p> Now, you can use the library to perform basic LDAP operations. Below is a simple example: </p> <pre><code>from ldap3 import Server, Connection, SUBTREE\n\ndef authenticate_user(self,username, password):\n        try:\n            ldap_server = Server(self.ldap_server)\n            with Connection(ldap_server, user=self.username, password=self.password, auto_bind=True) as conn:\n                search_filter = f'(&amp;(sAMAccountName={username})(memberOf={self.search_dn}))'\n                conn.search(search_base=self.base_dn, search_filter=search_filter, search_scope=SUBTREE, attributes='*')\n                if conn.entries:\n                    distinguishedName=conn.entries[0].distinguishedName[0]\n                    rebind_status = conn.rebind(user=distinguishedName, password=password)\n                    if conn.bind():\n                        return True,'LDAP credentials were good!'  # Authentication successful\n                    else:\n                        return False,\"Invalid Credentials\"\n                return False,'User not found in the specific group or invalid credentials'\n        except Exception as e:\n            return False,'LDAP Authentication Error'\n\n</code></pre>"},{"location":"Timezone/","title":"Application Layer","text":""},{"location":"Timezone/#time-zone","title":"Time zone","text":"<p> In Django, the timezone module is part of the django.utils package and provides utilities for working with time zones. It uses the pytz library internally to handle time zone conversions. Here's how you can work with time zones in a Django project:  </p>"},{"location":"Timezone/#1-enable-time-zone-support-in-settings","title":"1. Enable Time Zone Support in Settings:","text":"<p> Ensure that the USE_TZ setting is set to True in your Django project's settings.py file. This enables time zone support in your project. </p> <pre><code>LANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_TZ = True\n</code></pre>"},{"location":"Timezone/#2-querying-with-time-zones","title":"2. Querying with Time Zones","text":"<p> When querying the database, ensure that you use timezone.now() and timezone.timedelta for comparisons. </p> <pre><code>from django.utils import timezone\nfrom myapp.models import MyModel\n\nnow = timezone.now()\nrecent_objects = MyModel.objects.filter(created_at__gte=now - timezone.timedelta(days=7))\n</code></pre> <p>Custom time zone reference : https://pypi.org/project/pytz/</p> <p>Django time zone reference : https://docs.djangoproject.com/en/5.0/topics/i18n/timezones/</p>"},{"location":"URLEncyption/","title":"Security Layer","text":""},{"location":"URLEncyption/#url-encryption","title":"URL Encryption","text":"<p>In AES-GCM (Advanced Encryption Standard - Galois/Counter Mode), a nonce (number used once) is a value that should be unique for each encryption operation with the same key. It is combined with the key and the plaintext to produce the ciphertext. The uniqueness of the nonce is crucial for the security of the AES-GCM algorithm.</p> <p>The nonce is usually a random or unique value, and it should not be reused with the same key. If a nonce is reused for the same key, it can compromise the security of the encryption and authentication provided by AES-GCM.</p> <p>When working with AES-GCM, the combination of the key and nonce is used to produce a unique keystream for encrypting the plaintext and generating an authentication tag. The authentication tag is used to verify the integrity of the ciphertext during decryption.</p> <p>Here's a simple example using the cryptography library in Python, which is a popular library for cryptography:</p> <pre><code>from cryptography.hazmat.primitives.ciphers.aead import AESGCM\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.backends import default_backend\nimport os\n\n# Generate a random 96-bit nonce\nnonce = os.urandom(12)\n\n# Generate a random 256-bit key\nkey = os.urandom(32)\n\n# Create AES-GCM cipher object\ncipher = AESGCM(key)\n\n# Encrypt the plaintext\nplaintext = b\"Hello, AES-GCM!\"\nciphertext = cipher.encrypt(nonce, plaintext, None)\n\n# Decrypt the ciphertext\ndecrypted_text = cipher.decrypt(nonce, ciphertext, None)\n\n# Verify the authenticity of the ciphertext\ntry:\n    # This should not raise an exception if the ciphertext is authentic\n    cipher.decrypt(nonce, ciphertext, None)\n    print(\"Authentication successful.\")\nexcept Exception as e:\n    print(f\"Authentication failed: {str(e)}\")\n\nprint(f\"Original Text: {decrypted_text.decode('utf-8')}\")\n</code></pre> <p>https://pycryptodome.readthedocs.io/en/latest/src/examples.html#encrypt-data-with-aes</p>"},{"location":"Users/","title":"Application Layer","text":""},{"location":"Users/#default-user-model","title":"Default User model","text":"<p> In Django, the User model is part of the built-in authentication system and is used to manage user accounts. It provides fields such as username, password, email, and methods for handling user authentication. The User model is located in the django.contrib.auth.models module.  Here's a basic overview of the Django User model:  </p> <pre><code>python manage.py createsuperuser\n</code></pre>"},{"location":"Users/#custom-user-model","title":"Custom User Model","text":"<p>Django also allows you to create a custom user model by extending the AbstractUser class. This gives you the flexibility to add custom fields to the user model.</p> <p>Here's an example of creating a custom user model:</p> <pre><code>from django.contrib.auth.models import AbstractUser\n\nclass CustomUser(AbstractUser):\n    # Add custom fields here\n\n# Update the AUTH_USER_MODEL setting in settings.py\nAUTH_USER_MODEL = 'your_app.CustomUser'\n</code></pre>"},{"location":"http/","title":"Application Layer","text":""},{"location":"http/#api","title":"Api","text":"<p> Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes. HTTP follows a classical client-server model, with a client opening a connection to make a request, then waiting until it receives a response. HTTP is a stateless protocol, meaning that the server does not keep any data (state) between two requests. </p>"},{"location":"http/#http-headers","title":"HTTP Headers:","text":"<p> HTTP headers are additional pieces of information sent between the client and the server in both request and response messages. They convey information about the request or the response, the server, the client, or the data being sent.  Here's an overview of how tokens are typically included in HTTP headers:  ### Authorization Header:  The Authorization header is commonly used to include tokens in HTTP requests. The value of this header is typically in the format Bearer , where  is the actual access token.   <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\n</code></pre>"},{"location":"http/#common-request-headers","title":"Common Request Headers:","text":"<p>User-Agent: Describes the user agent (browser or client) making the request.</p> <p>Host: Specifies the domain name of the server (used in virtual hosting).</p> <p>Accept: Informs the server about the types of media that the client can process.</p> <p>Authorization: Contains credentials for authenticating the client with the server.</p>"},{"location":"http/#common-response-headers","title":"Common Response Headers:","text":"<p>User-Agent: Describes the user agent (browser or client) making the request.</p> <p>Host: Specifies the domain name of the server (used in virtual hosting).</p> <p>Accept: Informs the server about the types of media that the client can process.</p> <p>Authorization: Contains credentials for authenticating the client with the server.</p>"},{"location":"http/#http-request-methods","title":"HTTP Request Methods:","text":"<p>HTTP defines several request methods indicating the desired action to be performed on the identified resource.</p> <p>GET: Retrieve data from the server. POST: Send data to the server to create a new resource. PUT: Update a resource on the server. DELETE: Remove a resource from the server. OPTIONS: Describes the communication options for the target resource. HEAD: Same as GET but only retrieves headers, not the actual data.</p>"},{"location":"http/#cors-cross-origin-resource-sharing","title":"CORS (Cross-Origin Resource Sharing):","text":"<p>CORS is a security feature implemented by web browsers to control access to resources located outside of the origin of the document. It prevents web pages from making requests to a different domain than the one that served the web page.</p>"},{"location":"http/#cors-headers","title":"CORS Headers:","text":"<p>Origin: Indicates the origin of the cross-origin request.</p> <p>Access-Control-Allow-Origin: Specifies which origin(s) are allowed to access the resource. Access-Control-Allow-Methods: Specifies the HTTP methods allowed when accessing the resource. Access-Control-Allow-Headers: Lists which HTTP headers can be used when making the actual request.</p>"},{"location":"http/#http-response-status-codes","title":"HTTP Response Status Codes:","text":"<p>HTTP response status codes indicate the outcome of a request. The status code is a three-digit number.</p> <p>Common Status Codes:</p> <p>200 OK: The request was successful. 201 Created: The request was successful, and a new resource was created. 204 No Content: The server successfully processed the request but there is no content to send. 400 Bad Request: The server could not understand the request due to invalid syntax. 401 Unauthorized: The request requires user authentication. 403 Forbidden: The server understood the request, but it refuses to authorize it. 404 Not Found: The requested resource could not be found on the server. 500 Internal Server Error: A generic error message returned when an unexpected condition was encountered by the server.</p>"},{"location":"http/#handling-cors-errors","title":"Handling CORS Errors:","text":"<p>When dealing with CORS errors, make sure that the server includes the necessary CORS headers (Access-Control-Allow-Origin, etc.) in its responses. Additionally, the client-side code (JavaScript) needs to handle CORS errors gracefully.</p> <p>In some cases, using techniques like JSONP, CORS middleware, or adjusting server configurations may be necessary to resolve CORS issues.</p> <p>These concepts are fundamental to understanding and working with HTTP, whether you are building a web application, a RESTful API, or interacting with web services.</p>"},{"location":"i18n/","title":"Application Layer","text":""},{"location":"i18n/#i18n","title":"i18n","text":"<p>https://docs.djangoproject.com/en/5.0/topics/i18n/translation/</p> <p> Internationalization (i18n) in Django refers to the process of adapting your web application to support multiple languages and locales. The goal is to make your application accessible to users from different linguistic backgrounds. Django provides robust support for i18n, making it relatively easy to implement.  For digid customized based on organsation logic, loading from json file. configured  in the settings.py   <pre><code>I18N_LANG = 'en'\nI18N_FILE = f'{BASE_DIR}/../{APP_COUNTRY_CODE}/{ORG_ID}/i18n/{I18N_LANG}.json'\nload_i18n = json.load(open(I18N_FILE))\n</code></pre>   Here's a basic guide on how to set up and use internationalization in a Django project:  </p>"},{"location":"i18n/#1-enable-i18n-in-settingspy","title":"1. Enable i18n in settings.py:","text":"<p> In Django, the LANGUAGE_CODE setting in the settings.py file determines the default language for your application. It is used to set the language code for the user interface and localization features.   By default, LANGUAGE_CODE is set to 'en-us', which represents English (United States). If your application is primarily in English, you can leave it as is. However, if you want to use a different default language, you can change the value accordingly.   In your settings.py, make sure that django.middleware.locale.LocaleMiddleware is included in the MIDDLEWARE setting: </p> <pre><code>MIDDLEWARE = [\n    # ...\n    'django.middleware.locale.LocaleMiddleware',\n    # ...\n]\n\nLANGUAGE_CODE = 'es-es'\n\n</code></pre> <p> Replace 'es-es' with the appropriate language code for your desired default language and locale.  Also, set the LANGUAGES and LOCALE_PATHS settings:</p> <pre><code>LANGUAGES = [\n    ('en', _('English')),\n    ('es', _('Spanish')),\n    # Add more languages as needed\n]\n\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),  # Path to the directory containing your translation files\n]\n</code></pre>"},{"location":"i18n/#2-create-translation-files","title":"2. Create Translation Files:","text":"<p> Django uses .po (Portable Object) files for translation. Run the following management command to create initial translation files: </p> <pre><code>python manage.py makemessages -l es\n</code></pre>"}]}