{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Dependencies","text":""},{"location":"#libraries","title":"Libraries","text":"<p>This project uses the following tools and libraries:</p> Category Tool Description Documentation Python Version Management <code>pyenv</code> Manage and switch between multiple Python versions. pyenv GitHub Python Packaging <code>uv</code> Fast Python package installer and dependency resolver. uv Docs [Optional] <code>poetry</code> Dependency management and packaging tool for Python projects. Poetry Docs Project Documentation <code>mkDocs</code> Static site generator for project documentation using Markdown. MkDocs Project-Specific Commands <code>just</code> Command runner for defining and executing project-specific tasks. Just Docs Python Linter &amp; Formatter <code>ruff</code> Extremely fast Python linter and code formatter. Ruff Docs Python Testing Framework <code>pytest</code> Powerful and flexible testing framework for Python. pytest Docs Python Data Validation <code>Pydantic</code> Data validation and settings management using Python type annotations. Pydantic Docs Python SOAP Client <code>Zeep</code> Modern SOAP client for interacting with SOAP-based web services. Zeep Docs"},{"location":"#installation-commands","title":"Installation Commands","text":"<pre><code>#!/bin/bash\n\n# Install pyenv (Python Version Management)\necho \"Installing pyenv...\"\ncurl https://pyenv.run | bash\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Install Python (latest stable version) using pyenv\necho \"Installing Python via pyenv...\"\npyenv install 3.11.5  # Replace with the desired version\npyenv global 3.11.5\n\n# Install Just (Project-specific commands)\necho \"Installing Just...\"\ncurl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin\n</code></pre>"},{"location":"#commands-installation-uv-library","title":"Commands : Installation UV Library","text":"<pre><code># Install uv (Python package installer)\necho \"Installing uv...\"\ncurl -LsSf https://astral.sh/uv/install.sh | sh\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"#poetry-installation-commands-if-not-using-uv-packages-optional","title":"Poetry Installation Commands (if not using UV packages) [Optional]","text":"<pre><code># Install Poetry (Python dependency management)\necho \"Installing Poetry...\"\ncurl -sSL https://install.python-poetry.org | python3 -\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"#uv-installation-commands","title":"UV Installation Commands","text":"<pre><code># Install MkDocs (Project documentation)\necho \"Installing MkDocs...\"\nuv add mkdocs\n\n# Install Ruff (Python linter and formatter)\necho \"Installing Ruff...\"\nuv add ruff\n\n# Install pytest (Python testing framework)\necho \"Installing pytest...\"\nuv add pytest\n\n# Install Pydantic (Python data validation library)\necho \"Installing Pydantic...\"\nuv add pydantic\n\n# Install Zeep (Python SOAP client)\necho \"Installing Zeep...\"\nuv add zeep\n\necho \"All dependencies installed successfully!\"\n</code></pre>"},{"location":"#pip-installation-commands-if-not-using-uv-packages-optional","title":"PIP Installation Commands (if not using UV packages) [Optional]","text":"<pre><code># Install MkDocs (Project documentation)\necho \"Installing MkDocs...\"\npip install mkdocs\n\n# Install Ruff (Python linter and formatter)\necho \"Installing Ruff...\"\npip install ruff\n\n# Install pytest (Python testing framework)\necho \"Installing pytest...\"\npip install pytest\n\n# Install Pydantic (Python data validation library)\necho \"Installing Pydantic...\"\npip install pydantic\n\n# Install Zeep (Python SOAP client)\necho \"Installing Zeep...\"\npip install zeep\n\necho \"All dependencies installed successfully!\"\n</code></pre>"},{"location":"#uv-tree","title":"UV Tree","text":"<pre><code>integration-framework v0.1.0\n\u251c\u2500\u2500 httpx v0.28.1\n\u2502   \u251c\u2500\u2500 anyio v4.9.0\n\u2502   \u2502   \u251c\u2500\u2500 idna v3.10\n\u2502   \u2502   \u251c\u2500\u2500 sniffio v1.3.1\n\u2502   \u2502   \u2514\u2500\u2500 typing-extensions v4.12.2\n\u2502   \u251c\u2500\u2500 certifi v2025.1.31\n\u2502   \u251c\u2500\u2500 httpcore v1.0.7\n\u2502   \u2502   \u251c\u2500\u2500 certifi v2025.1.31\n\u2502   \u2502   \u2514\u2500\u2500 h11 v0.14.0\n\u2502   \u2514\u2500\u2500 idna v3.10\n\u251c\u2500\u2500 ldap3 v2.9.1\n\u2502   \u2514\u2500\u2500 pyasn1 v0.6.1\n\u251c\u2500\u2500 pydantic v2.10.6\n\u2502   \u251c\u2500\u2500 annotated-types v0.7.0\n\u2502   \u251c\u2500\u2500 pydantic-core v2.27.2\n\u2502   \u2502   \u2514\u2500\u2500 typing-extensions v4.12.2\n\u2502   \u2514\u2500\u2500 typing-extensions v4.12.2\n\u251c\u2500\u2500 pytest v8.3.5\n\u2502   \u251c\u2500\u2500 iniconfig v2.0.0\n\u2502   \u251c\u2500\u2500 packaging v24.2\n\u2502   \u2514\u2500\u2500 pluggy v1.5.0\n\u251c\u2500\u2500 pyyaml v6.0.2\n\u251c\u2500\u2500 xmltodict v0.14.2\n\u251c\u2500\u2500 zeep v4.3.1\n\u2502   \u251c\u2500\u2500 attrs v25.3.0\n\u2502   \u251c\u2500\u2500 isodate v0.7.2\n\u2502   \u251c\u2500\u2500 lxml v5.3.1\n\u2502   \u251c\u2500\u2500 platformdirs v4.3.6\n\u2502   \u251c\u2500\u2500 pytz v2025.1\n\u2502   \u251c\u2500\u2500 requests v2.32.3\n\u2502   \u2502   \u251c\u2500\u2500 certifi v2025.1.31\n\u2502   \u2502   \u251c\u2500\u2500 charset-normalizer v3.4.1\n\u2502   \u2502   \u251c\u2500\u2500 idna v3.10\n\u2502   \u2502   \u2514\u2500\u2500 urllib3 v2.3.0\n\u2502   \u251c\u2500\u2500 requests-file v2.1.0\n\u2502   \u2502   \u2514\u2500\u2500 requests v2.32.3 (*)\n\u2502   \u2514\u2500\u2500 requests-toolbelt v1.0.0\n\u2502       \u2514\u2500\u2500 requests v2.32.3 (*)\n\u251c\u2500\u2500 mkdocs v1.6.1 (group: dev)\n\u2502   \u251c\u2500\u2500 click v8.1.8\n\u2502   \u251c\u2500\u2500 ghp-import v2.1.0\n\u2502   \u2502   \u2514\u2500\u2500 python-dateutil v2.9.0.post0\n\u2502   \u2502       \u2514\u2500\u2500 six v1.17.0\n\u2502   \u251c\u2500\u2500 jinja2 v3.1.6\n\u2502   \u2502   \u2514\u2500\u2500 markupsafe v3.0.2\n\u2502   \u251c\u2500\u2500 markdown v3.7\n\u2502   \u251c\u2500\u2500 markupsafe v3.0.2\n\u2502   \u251c\u2500\u2500 mergedeep v1.3.4\n\u2502   \u251c\u2500\u2500 mkdocs-get-deps v0.2.0\n\u2502   \u2502   \u251c\u2500\u2500 mergedeep v1.3.4\n\u2502   \u2502   \u251c\u2500\u2500 platformdirs v4.3.6\n\u2502   \u2502   \u2514\u2500\u2500 pyyaml v6.0.2\n\u2502   \u251c\u2500\u2500 packaging v24.2\n\u2502   \u251c\u2500\u2500 pathspec v0.12.1\n\u2502   \u251c\u2500\u2500 pyyaml v6.0.2\n\u2502   \u251c\u2500\u2500 pyyaml-env-tag v0.1\n\u2502   \u2502   \u2514\u2500\u2500 pyyaml v6.0.2\n\u2502   \u2514\u2500\u2500 watchdog v6.0.0\n\u2514\u2500\u2500 ruff v0.11.0 (group: dev)\n(*) Package tree already displayed\n</code></pre>"},{"location":"email/","title":"Email","text":"<p>Official Documentation: https://docs.python.org/3/library/smtplib.html</p> <p>The smtplib module defines an SMTP client session object that can be used to send mail to any internet machine with an SMTP or ESMTP listener daemon. For details of SMTP and ESMTP operation, consult RFC 821 (Simple Mail Transfer Protocol) and RFC 1869 (SMTP Service Extensions).</p>"},{"location":"email/#installation","title":"Installation","text":"<pre><code>The reason for this is that smtplib is inbuilt to Python. Therefore, it is installed initially with the Python installation.\n</code></pre>"},{"location":"email/#configtoml","title":"Config.toml","text":"<pre><code>[email]\nfrom_email = \"abcd@digid.ai\"\npassword = \"abc\"\nsmtp_server =  \"smtp.gmail.com\"\nsmtp_port = 587\nuse_tls = \"True\"\n</code></pre>"},{"location":"email/#commands","title":"Commands","text":"<pre><code>just run api email\n</code></pre>"},{"location":"email/#output","title":"Output","text":"<pre><code>[*] loading from dummy toml file\ninput_data :: to_email='ezhil@tocode.ai'\nserver :  &lt;smtplib.SMTP object at 0x105227ce0&gt;\nEmail sent successfully!\nresult :  True\n</code></pre>"},{"location":"finacle/","title":"Finacle","text":"<p>Official Documentation: &lt;&gt;</p> <p>Finacle is an industry-leading digital banking solution suite from EdgeVerve Systems, a wholly owned subsidiary of Infosys, designed to help financial institutions drive digital transformation and enhance customer experiences. </p>"},{"location":"finacle/#duplicate-check","title":"Duplicate Check","text":""},{"location":"finacle/#configtoml","title":"Config.toml","text":"<pre><code>[finacle.dedupcheckcif]\nfinacle_url = \"http://bank_url.com/fiwebservice/services/FIPWebService\"\ninput_file_path = \"finacle/DedupCheckCIF.xml\"\nmime_type = \"text\"\n</code></pre>"},{"location":"finacle/#dummy-data","title":"Dummy data","text":"<pre><code>just run api finacle config.toml dedupcheckcif dummy inputdata.toml\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"dedupcheckcif\" config_source_data=\"dummy\"\n</code></pre>"},{"location":"finacle/#database-data","title":"Database  data","text":"<pre><code>just run api finacle config.toml dedupcheckcif database 12314\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"dedupcheckcif\" config_source_data=\"database\" application_id=12314\n</code></pre>"},{"location":"finacle/#cif-add","title":"CIF Add","text":""},{"location":"finacle/#configtoml_1","title":"Config.toml","text":"<pre><code>[finacle.cifadd]\nfinacle_url = \"http://bank_url.com/fiwebservice/services/FIPWebService\"\ninput_file_path = \"finacle/CIFAdd.xml\"\nmime_type = \"text\"\n</code></pre>"},{"location":"finacle/#dummy-data_1","title":"Dummy data","text":"<pre><code>just run api finacle config.toml cifadd dummy inputdata.toml\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"cifadd\" config_source_data=\"dummy\"\n</code></pre>"},{"location":"finacle/#database-data_1","title":"Database  data","text":"<pre><code>just run api finacle config.toml cifadd database 12314\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"cifadd\" config_source_data=\"database\" application_id=12314\n</code></pre>"},{"location":"finacle/#verify-add","title":"Verify Add","text":""},{"location":"finacle/#configtoml_2","title":"Config.toml","text":"<pre><code>[finacle.verifycif]\nfinacle_url = \"http://bank_url.com/fiwebservice/services/FIPWebService\"\ninput_file_path = \"finacle/VerifyCIF.xml\"\nmime_type = \"text\"\n</code></pre>"},{"location":"finacle/#dummy-data_2","title":"Dummy data","text":"<pre><code>just run api finacle config.toml verifycif dummy inputdata.toml\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"verifycif\" config_source_data=\"dummy\"\n</code></pre>"},{"location":"finacle/#database-data_2","title":"Database  data","text":"<pre><code>just run api finacle config.toml verifycif database 12314\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"verifycif\" config_source_data=\"database\" application_id=12314\n</code></pre>"},{"location":"finacle/#sba-add","title":"SBA Add","text":""},{"location":"finacle/#configtoml_3","title":"Config.toml","text":"<pre><code>[finacle.sbaactadd]\nfinacle_url = \"http://bank_url.com/fiwebservice/services/FIPWebService\"\ninput_file_path = \"finacle/SBAActAdd.xml\"\nmime_type = \"text\"\n</code></pre>"},{"location":"finacle/#dummy-data_3","title":"Dummy data","text":"<pre><code>just run api finacle config.toml sbaactadd dummy inputdata.toml\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"sbaactadd\" config_source_data=\"dummy\"\n</code></pre>"},{"location":"finacle/#database-data_3","title":"Database  data","text":"<pre><code>just run api finacle config.toml sbaactadd database 12314\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"sbaactadd\" config_source_data=\"database\" application_id=12314\n</code></pre>"},{"location":"finacle/#svs-add","title":"SVS Add","text":""},{"location":"finacle/#configtoml_4","title":"Config.toml","text":"<pre><code>[finacle.svssignatureadd]\nfinacle_url = \"http://bank_url.com/fiwebservice/services/FIPWebService\"\ninput_file_path = \"finacle/SVSSignatureAdd.xml\"\nmime_type = \"text\"\n</code></pre>"},{"location":"finacle/#dummy-data_4","title":"Dummy data","text":"<pre><code>just run api finacle config.toml svssignatureadd dummy inputdata.toml\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"svssignatureadd\" config_source_data=\"dummy\"\n</code></pre>"},{"location":"finacle/#database-data_4","title":"Database  data","text":"<pre><code>just run api finacle config.toml svssignatureadd database 12314\n\n# with paramater\njust run api config_channel_type=\"finacle\" config_file_path=\"config.toml\" config_entry_name=\"svssignatureadd\" config_source_data=\"database\" application_id=12314\n</code></pre>"},{"location":"finacle/#output","title":"Output","text":"<pre><code>[*] loading from dummy toml file\ninput_data :: username='abc' password='123123123'\nresult :  (False, 'LDAP Authentication Success')\n</code></pre>"},{"location":"folder/","title":"Folder","text":""},{"location":"folder/#uv-tree","title":"UV Tree","text":"<pre><code>Integration-Framework/\n\u251c\u2500\u2500 _test_api.py\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 api_wrapper.py\n\u2502   \u251c\u2500\u2500 email_wrapper.py\n\u2502   \u251c\u2500\u2500 finacle_wrapper.py\n\u2502   \u251c\u2500\u2500 ldap_wrapper.py\n\u2502   \u2514\u2500\u2500 sms_wrapper.py\n\u251c\u2500\u2500 caml_types/\n\u2502   \u251c\u2500\u2500 api_types.py\n\u2502   \u251c\u2500\u2500 config_types.py\n\u2502   \u251c\u2500\u2500 input_entity_types.py\n\u2502   \u251c\u2500\u2500 request_config_types.py\n\u2502   \u2514\u2500\u2500 response_entity_types.py\n\u251c\u2500\u2500 config.toml\n\u251c\u2500\u2500 finacle/\n\u2502   \u251c\u2500\u2500 CIFAdd.xml\n\u2502   \u251c\u2500\u2500 DedupCheckCIF.xml\n\u2502   \u251c\u2500\u2500 SBAActAdd.xml\n\u2502   \u251c\u2500\u2500 SVSSignatureAdd.xml\n\u2502   \u2514\u2500\u2500 VerifyCIF.xml\n\u251c\u2500\u2500 finacle_helper/\n\u2502   \u251c\u2500\u2500 cif_add_parser.py\n\u2502   \u251c\u2500\u2500 dup_check_parser.py\n\u2502   \u2514\u2500\u2500 generic_reponse_parser.py\n\u251c\u2500\u2500 finacle_response/\n\u2502   \u251c\u2500\u2500 cif-add-resp-error.txt\n\u2502   \u2514\u2500\u2500 dup-check-cif-res.txt\n\u251c\u2500\u2500 input.toml\n\u251c\u2500\u2500 inputdata.toml\n\u251c\u2500\u2500 Integration-Framework.code-workspace\n\u251c\u2500\u2500 Justfile\n\u251c\u2500\u2500 load_data.py\n\u251c\u2500\u2500 mybank.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 _test_aml_ind.py\n\u2502   \u251c\u2500\u2500 _test_api.py\n\u2502   \u251c\u2500\u2500 _test_digio.py\n\u2502   \u251c\u2500\u2500 _test_zeep.py\n\u2502   \u251c\u2500\u2500 _test_zeep_pydantic_class.py\n\u2502   \u251c\u2500\u2500 aml2.py\n\u2502   \u251c\u2500\u2500 input.toml\n\u2502   \u2514\u2500\u2500 pipe-line_finacle_test.py\n\u251c\u2500\u2500 task_helper/\n\u2502   \u251c\u2500\u2500 api_clients.py\n\u2502   \u251c\u2500\u2500 api_factory.py\n\u2502   \u2514\u2500\u2500 function_runner_mixin.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_cif_add.py\n\u2502   \u251c\u2500\u2500 test_dup_check.py\n\u2502   \u251c\u2500\u2500 test_email.py\n\u2502   \u251c\u2500\u2500 test_ldap.py\n\u2502   \u251c\u2500\u2500 test_sba_add.py\n\u2502   \u251c\u2500\u2500 test_sms.py\n\u2502   \u2514\u2500\u2500 test_svs_add.py\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 interpolation_utils.py\n\u2502   \u2514\u2500\u2500 utils.py\n\u2514\u2500\u2500 uv.lock\n</code></pre>"},{"location":"just/","title":"Just: A Command Runner for Projects","text":"<ol> <li>Github Documentation: https://github.com/casey/just</li> <li>Official Documentation: https://just.systems/man/en/</li> </ol> <p>Just is a handy command runner that allows you to save and run project-specific commands from a Justfile. It is similar to make but designed to be simpler and more modern, with a focus on readability and ease of use.</p>"},{"location":"just/#why-use-just","title":"Why Use Just?","text":"<ol> <li>Simplicity: Easier to read and write than Makefile.</li> <li>Portability: Works on macOS, Linux, and Windows.</li> <li>Modern Features: Supports variables, dependencies, and command-line arguments.</li> <li>Project-Specific: Keeps all your project commands in one place.</li> </ol>"},{"location":"just/#installation-commands-just","title":"Installation Commands: Just","text":"<p>check this : https://github.com/casey/just?tab=readme-ov-file#cross-platform</p> <p>Install Just using a package manager:</p> <pre><code># Install Just on macOS using Homebrew\nbrew install just\n\n# Install Just on Linux using Cargo (Rust's package manager)\ncargo install just\n\n# Install Just on Windows using Scoop\nscoop install just\n</code></pre>"},{"location":"just/#verify-installation","title":"Verify Installation:","text":"<pre><code>just --version\n</code></pre>"},{"location":"just/#basic-usage","title":"Basic Usage","text":"<p>Create a Justfile</p> <p>A Justfile is a text file where you define your commands (called \"recipes\"). Here's an example:</p> <pre><code># Justfile\n\n# Default recipe (runs when you type `just`)\ndefault:\n    echo \"Hello, World!\"\n\n# Run tests\ntest:\n    cargo test\n\n# Start the development server\nstart:\n    python -m http.server 8000\n\n# Clean build artifacts\nclean:\n    rm -rf build/\n</code></pre>"},{"location":"just/#frequently-used-cli-commands","title":"Frequently Used CLI Commands","text":"<pre><code># Run the default recipe\njust\n\n# Run a specific recipe\njust &lt;recipe-name&gt;\n\n# List all available recipes\njust --list\n\n# Dry run: Print commands without executing them\njust --dry-run &lt;recipe-name&gt;\n\n# Edit the Justfile\njust --edit\n</code></pre>"},{"location":"just/#advanced-features","title":"Advanced Features","text":""},{"location":"just/#variables","title":"Variables","text":"<p>You can define variables in your Justfile:</p> <pre><code># Define a variable\nPORT := 8000\n\nstart:\n    echo \"Starting server on port {{PORT}}\"\n    python -m http.server {{PORT}}\n</code></pre>"},{"location":"just/#dependencies","title":"Dependencies","text":"<p>Recipes can depend on other recipes:</p> <pre><code>build:\n    echo \"Building...\"\n    touch build/output.txt\n\ndeploy: build\n    echo \"Deploying...\"\n    cp build/output.txt /var/www/\n</code></pre>"},{"location":"just/#command-line-arguments","title":"Command-Line Arguments","text":"<p>Pass arguments to recipes:</p> <pre><code>greet NAME:\n    echo \"Hello, {{NAME}}!\"\n</code></pre> <p>Run it with:</p> <pre><code>just greet Alice\n</code></pre>"},{"location":"just/#example-justfile-for-a-python-project","title":"Example Justfile for a Python Project","text":"<pre><code># Justfile for a Python project\n\n# Default recipe\ndefault:\n    just --list\n\n# Install dependencies\ninstall:\n    pip install -r requirements.txt\n\n# Run tests\ntest:\n    pytest\n\n# Format code\nformat:\n    black .\n    isort .\n\n# Lint code\nlint:\n    flake8 .\n    mypy .\n\n# Clean up\nclean:\n    rm -rf __pycache__/\n    rm -rf .mypy_cache/\n</code></pre>"},{"location":"ldap/","title":"LDAP","text":"<p>Official Documentation: https://ldap3.readthedocs.io/en/latest/connection.html</p> <p>ldap3 is a strictly RFC 4510 conforming LDAP v3 pure Python client library. The whole ldap3 library has been written from scratch and the same codebase works with Python 2, Python 3, PyPy and PyPy3 on any system where it can gain access to the network via Python and its Standard Library.</p>"},{"location":"ldap/#installation","title":"Installation","text":"<pre><code>uv add ldap3\n</code></pre>"},{"location":"ldap/#configtoml","title":"Config.toml","text":"<pre><code>[ldap]\nhost = \"ldap://abc.co.ug\"\nbase_dn = \"DC=abc, DC=co, DC=ug\"\nsearch_dn = \"CN=abc, OU=Head Office, OU=Security Groups, OU=BAC Groups, DC=abc, DC=co, DC=ug\"\nusername = \"abc\"\npassword = \"asdfasdfasdfsadfad=\"\n</code></pre>"},{"location":"ldap/#commands","title":"Commands","text":"<pre><code>just run api ldap\n</code></pre>"},{"location":"ldap/#output","title":"Output","text":"<pre><code>[*] loading from dummy toml file\ninput_data :: username='abc' password='123123123'\nresult :  (False, 'LDAP Authentication Success')\n</code></pre>"},{"location":"pyenv/","title":"Python Version Management (pyenv)","text":"<p>Offical Documentation : https://github.com/pyenv/pyenv</p> <p>pyenv: A tool to easily switch between multiple versions of Python. It helps manage different Python versions for different projects, ensuring compatibility.</p>"},{"location":"pyenv/#installation-commands-pyenv-library-python-version-management","title":"Installation Commands : Pyenv Library (Python Version Management)","text":"<pre><code>echo \"Installing pyenv...\"\ncurl https://pyenv.run | bash\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"pyenv/#frequently-using-cli-commands","title":"Frequently Using  Cli Commands","text":"<pre><code># pyenv accepts a switch to the install command to list available versions: --list, or -l\npyenv install -l\n\n# Install a specific Python version.\npyenv install &lt;version&gt;\n\n# Set the global Python version.\npyenv global &lt;version&gt;\n\n# Set the Python version for the current project.\npyenv local &lt;version&gt;\n\n# List all installed Python versions.\npyenv &lt;versions&gt;\n\n# Show the current Python version(s) and its origin\npyenv &lt;version&gt;\n</code></pre>"},{"location":"pyenv/#pyenv-commands","title":"Pyenv commands","text":"<pre><code>Usage: pyenv &lt;command&gt; [&lt;args&gt;]\n\nSome useful pyenv commands are:\n--version   Display the version of pyenv\ncommands    List all available pyenv commands\nexec        Run an executable with the selected Python version\nglobal      Set or show the global Python version(s)\nhelp        Display help for a command\nhooks       List hook scripts for a given pyenv command\ninit        Configure the shell environment for pyenv\ninstall     Install a Python version using python-build\nlatest      Print the latest installed or known version with the given prefix\nlocal       Set or show the local application-specific Python version(s)\nprefix      Display prefixes for Python versions\nrehash      Rehash pyenv shims (run this after installing executables)\nroot        Display the root directory where versions and shims are kept\nshell       Set or show the shell-specific Python version\nshims       List existing pyenv shims\nuninstall   Uninstall Python versions\nversion     Show the current Python version(s) and its origin\nversion-file   Detect the file that sets the current pyenv version\nversion-name   Show the current Python version\nversion-origin   Explain how the current Python version is set\nversions    List all Python versions available to pyenv\nwhence      List all Python versions that contain the given executable\nwhich       Display the full path to an executable\n</code></pre>"},{"location":"pytest/","title":"Pytest","text":""},{"location":"pytest/#installation","title":"Installation","text":"<pre><code>uv add pytest --dev\n</code></pre>"},{"location":"pytest/#commands","title":"Commands","text":"<pre><code>just run test &lt;folder/filepath.py&gt;\n</code></pre>"},{"location":"pytest/#sms","title":"SMS","text":"<pre><code>just run test tests/test_sms.py\n</code></pre>"},{"location":"pytest/#ldap","title":"LDAP","text":"<pre><code>just run test tests/test_ldap.py\n</code></pre>"},{"location":"pytest/#email","title":"Email","text":"<pre><code>just run test tests/test_email.py\n</code></pre>"},{"location":"pytest/#finacle-test-commands","title":"Finacle test commands","text":""},{"location":"pytest/#cif-add","title":"CIF Add","text":"<pre><code>just run test tests/test_cif_add.py\n</code></pre>"},{"location":"pytest/#verify-add","title":"Verify Add","text":"<pre><code>just run test tests/test_cif_add.py\n</code></pre>"},{"location":"pytest/#dup-add","title":"Dup Add","text":"<pre><code>just run test tests/test_dup_check.py\n</code></pre>"},{"location":"pytest/#sba-add","title":"SBA Add","text":"<pre><code>just run test tests/test_sba_add.py\n</code></pre>"},{"location":"pytest/#svs-add","title":"SVS Add","text":"<pre><code>just run test tests/test_svs_add.py\n</code></pre>"},{"location":"ruff/","title":"Ruff","text":"<p>Official Documentation: https://github.com/charliermarsh/ruff</p> <p>An Extremely Fast Python Linter</p> <p>Ruff is a blazingly fast Python linter and code formatter,  written in Rust. It aims to be a drop-in replacement for tools like Flake8, isort, and Black, providing a unified and efficient way to lint and format Python code.</p>"},{"location":"ruff/#why-use-ruff","title":"Why Use Ruff?","text":"<ol> <li>Speed: Ruff is significantly faster than traditional Python linters.</li> <li>Unified Tool: Combines linting and formatting in a single tool.</li> <li>Rust-Powered: Written in Rust for performance and reliability.</li> <li>Compatibility: Works seamlessly with existing tools like Flake8, isort, and Black.</li> </ol>"},{"location":"ruff/#installation-commands-ruff","title":"Installation Commands: Ruff","text":"<pre><code># Install Ruff using pip\npip install ruff\n\n# Alternatively, install Ruff using pipx for isolated environments\npipx install ruff\n</code></pre>"},{"location":"ruff/#frequently-used-cli-commands","title":"Frequently Used CLI Commands","text":"<pre><code># Lint all Python files in the current directory and subdirectories\nruff check .\n\n# Lint a specific file or directory\nruff check path/to/file_or_directory\n\n# Automatically fix linting errors (where possible)\nruff check --fix .\n\n# Format Python files (similar to Black)\nruff format .\n\n# Show all available linting rules\nruff rule\n\n# Ignore specific linting rules\nruff check --ignore E501,E203 .\n\n# Generate a configuration file (`.ruff.toml`)\nruff generate-config\n</code></pre>"},{"location":"ruff/#ruff-commands","title":"Ruff Commands","text":"<pre><code>Usage: ruff &lt;command&gt; [&lt;args&gt;]\n\nSome useful Ruff commands are:\ncheck       Lint Python files\nformat      Format Python files\nrule        Show information about a specific linting rule\ngenerate-config   Generate a configuration file\nhelp        Display help for a command\n</code></pre>"},{"location":"ruff/#example-rufftoml-configuration-file","title":"Example .ruff.toml Configuration File","text":"<pre><code># Example Ruff configuration file\n[tool.ruff]\n# Enable specific linting rules\nselect = [\"E\", \"F\", \"W\", \"I\", \"B\"]\n\n# Ignore specific linting rules\nignore = [\"E501\"]\n\n# Set the maximum line length\nline-length = 88\n\n# Enable automatic fixes\nfix = true\n</code></pre>"},{"location":"ruff/#integrating-ruff-with-pre-commit","title":"Integrating Ruff with Pre-commit","text":"<p>Add Ruff to your .pre-commit-config.yaml file:</p> <pre><code>repos:\n- repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: v0.0.280  # Replace with the latest version\n    hooks:\n    - id: ruff\n        args: [--fix]\n</code></pre>"},{"location":"sms/","title":"SMS","text":"<p>Official Documentation: https://www.python-httpx.org/</p>"},{"location":"sms/#configtoml","title":"Config.toml","text":"<pre><code>[sms]\nurl = \"http://acbc.ai/api/processrequestV2\"\nusername =  \"abc\"\npassword = \"GtWD7dP99R7Htv5wE6P2RqeWsdfsdf\"\napi_key =   \"abc\"\nsecurity_key = \"abc\"\n</code></pre>"},{"location":"uv/","title":"Dependency Management (UV)","text":"<p>Offical Documentation : https://docs.astral.sh/uv/</p> <p>Python packaging and dependency management</p>"},{"location":"uv/#installation-commands-uv-library","title":"Installation Commands : UV Library","text":"<pre><code># Install uv (Python package installer)\necho \"Installing uv...\"\ncurl -LsSf https://astral.sh/uv/install.sh | sh\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"uv/#frequently-using-cli-commands","title":"Frequently Using  Cli Commands","text":"<pre><code># add library\nuv add &lt;package_name&gt;\n# eg :: uv add pandas\n\n# remove library\nuv remove &lt;package_name&gt;\n\n# Synchronize dependencies.\nuv sync\n\n# Set the Python version for the current project.\nuv run python3 &lt;file_name.py&gt;\nuv run\n    - mkdocs\n    - pytest\n    - python\n    - python3\n    - python3.12\n    - ruff\n\n# running tools without installation\nuvx &lt;command&gt;\n</code></pre>"},{"location":"uv/#uv-commands","title":"UV commands","text":"<pre><code>An extremely fast Python package manager.\n\nUsage: uv [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\nrun      Run a command or script\ninit     Create a new project\nadd      Add dependencies to the project\nremove   Remove dependencies from the project\nsync     Update the project's environment\nlock     Update the project's lockfile\nexport   Export the project's lockfile to an alternate format\ntree     Display the project's dependency tree\ntool     Run and install commands provided by Python packages\npython   Manage Python versions and installations\npip      Manage Python packages with a pip-compatible interface\nvenv     Create a virtual environment\nbuild    Build Python packages into source distributions and wheels\npublish  Upload distributions to an index\ncache    Manage uv's cache\nself     Manage the uv executable\nversion  Display uv's version\nhelp     Display documentation for a command\n\nCache options:\n-n, --no-cache               Avoid reading from or writing to the cache, instead using a temporary directory for the\n                            duration of the operation [env: UV_NO_CACHE=]\n    --cache-dir &lt;CACHE_DIR&gt;  Path to the cache directory [env: UV_CACHE_DIR=]\n\nPython options:\n    --python-preference &lt;PYTHON_PREFERENCE&gt;  Whether to prefer uv-managed or system Python installations [env:\n                                            UV_PYTHON_PREFERENCE=] [possible values: only-managed, managed, system,\n                                            only-system]\n    --no-python-downloads                    Disable automatic downloads of Python. [env: \"UV_PYTHON_DOWNLOADS=never\"]\n\nGlobal options:\n-q, --quiet\n        Do not print any output\n-v, --verbose...\n        Use verbose output\n    --color &lt;COLOR_CHOICE&gt;\n        Control colors in output [default: auto] [possible values: auto, always, never]\n    --native-tls\n        Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]\n    --offline\n        Disable network access\n    --allow-insecure-host &lt;ALLOW_INSECURE_HOST&gt;\n        Allow insecure connections to a host [env: UV_INSECURE_HOST=]\n    --no-progress\n        Hide all progress outputs [env: UV_NO_PROGRESS=]\n    --directory &lt;DIRECTORY&gt;\n        Change to the given directory prior to running the command\n    --project &lt;PROJECT&gt;\n        Run the command within the given project directory\n    --config-file &lt;CONFIG_FILE&gt;\n        The path to a `uv.toml` file to use for configuration [env: UV_CONFIG_FILE=]\n    --no-config\n        Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) [env: UV_NO_CONFIG=]\n-h, --help\n        Display the concise help for this command\n-V, --version\n        Display the uv version\n\nUse `uv help` for more details.\n</code></pre>"}]}